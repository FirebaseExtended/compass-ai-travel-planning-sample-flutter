"AccessLevel specifies coarse access policies for common situations."
enum AccessLevel {
  """
  This operation can be executed by anyone with or without authentication.
  Equivalent to @auth(expr: "true")
  """
  PUBLIC

  """
  This operation can only be executed with a valid Firebase Auth ID token.
  Note: it allows anonymous auth and unverified accounts, so may be subjected to abuses.
  It’s equivalent to @auth(expr: "auth.uid != nil")
  """
  USER_ANON

  """
  This operation can only be executed by a non-anonymous Firebase Auth account.
  It’s equivalent to @auth(expr: "auth.uid != nil && auth.token.firebase.sign_in_provider != 'anonymous'")"
  """
  USER

  """
  This operation can only be executed by a verified Firebase Auth account.
  It’s equivalent to @auth(expr: "auth.uid != nil && auth.token.email_verified")"
  """
  USER_EMAIL_VERIFIED

  """
  This operation can not be executed with no IAM credentials.
  It’s equivalent to @auth(expr: "false")
  """
  NO_ACCESS
}

"""
Defines the auth policy for a query or mutation. This directive must be added to
any operation you wish to be accessible from a client application. If left
unspecified, defaults to `@auth(level: NO_ACCESS)`.
"""
directive @auth(
  "The minimal level of access required to perform this operation."
  level: AccessLevel @fdc_oneOf(required: true)
  """
  A CEL expression that allows access to this operation if the expression
  evaluates to `true`.
  """
  expr: Boolean_Expr @fdc_oneOf(required: true)
) on QUERY | MUTATION
"Query filter criteria for `String` scalar fields."
input String_Filter {
  "When true, match if field `IS NULL`. When false, match if field is `NOT NULL`."
  isNull: Boolean
  "Match if field is exactly equal to provided value."
  eq: String @fdc_oneOf(group: "eq")
  """
  Match if field is exactly equal to the result of the provided server value
  expression. Currently only `auth.uid` is supported as an expression.
  """
  eq_expr: String_Expr @fdc_oneOf(group: "eq")
  "Match if field is not equal to provided value."
  ne: String @fdc_oneOf(group: "ne")
  """
  Match if field is not equal to the result of the provided server value
  expression. Currently only `auth.uid` is supported as an expression.
  """
  ne_expr: String_Expr @fdc_oneOf(group: "ne")
  "Match if field value is among the provided list of values."
  in: [String!]
  "Match if field value is not among the provided list of values."
  nin: [String!]
  "Match if field value is greater than the provided value."
  gt: String
  "Match if field value is greater than or equal to the provided value."
  ge: String
  "Match if field value is less than the provided value."
  lt: String
  "Match if field value is less than or equal to the provided value."
  le: String
  """
  Match if field value contains the provided value as a substring. Equivalent
  to `LIKE '%value%'`
  """
  contains: String
  """
  Match if field value starts with the provided value. Equivalent to
  `LIKE 'value%'`
  """
  startsWith: String
  """
  Match if field value ends with the provided value. Equivalent to
  `LIKE '%value'`
  """
  endsWith: String
  """
  Match if field value matches the provided pattern. See `String_Pattern` for
  more details.
  """
  pattern: String_Pattern
}

"""
The pattern match condition on a string. Specify either like or regex.
https://www.postgresql.org/docs/current/functions-matching.html
"""
input String_Pattern {
  "Match using the provided `LIKE` expression."
  like: String
  "Match using the provided POSIX regular expression."
  regex: String
  "When true, ignore case when matching."
  ignoreCase: Boolean
  "When true, invert the match result. Equivalent to `NOT LIKE` or `!~`."
  invert: Boolean
}

"Query filter criteris for `[String!]` scalar fields."
input String_ListFilter {
  "Match if list field contains the provided value as a member."
  includes: String
  "Match if list field does not contain the provided value as a member."
  excludes: String
  "Match if list field contains all of the provided values as members."
  includesAll: [String!]
  "Match if list field does not contain any of the provided values as members."
  excludesAll: [String!]
}

"Query filter criteria for `UUID` scalar fields."
input UUID_Filter {
  "When true, match if field `IS NULL`. When false, match if field is `NOT NULL`."
  isNull: Boolean
  "Match if field is exactly equal to provided value."
  eq: UUID
  "Match if field is not equal to provided value."
  ne: UUID
  "Match if field value is among the provided list of values."
  in: [UUID!]
  "Match if field value is not among the provided list of values."
  nin: [UUID!]
}

"Query filter criteris for `[UUID!]` scalar fields."
input UUID_ListFilter {
  "Match if list field contains the provided value as a member."
  includes: UUID
  "Match if list field does not contain the provided value as a member."
  excludes: UUID
  "Match if list field contains all of the provided values as members."
  includesAll: [UUID!]
  "Match if list field does not contain any of the provided values as members."
  excludesAll: [UUID!]
}

"Query filter criteria for `Int` scalar fields."
input Int_Filter {
  "When true, match if field `IS NULL`. When false, match if field is `NOT NULL`."
  isNull: Boolean
  "Match if field is exactly equal to provided value."
  eq: Int
  "Match if field is not equal to provided value."
  ne: Int
  "Match if field value is among the provided list of values."
  in: [Int!]
  "Match if field value is not among the provided list of values."
  nin: [Int!]
  "Match if field value is greater than the provided value."
  gt: Int
  "Match if field value is greater than or equal to the provided value."
  ge: Int
  "Match if field value is less than the provided value."
  lt: Int
  "Match if field value is less than or equal to the provided value."
  le: Int
}

"Query filter criteris for `[Int!]` scalar fields."
input Int_ListFilter {
  "Match if list field contains the provided value as a member."
  includes: Int
  "Match if list field does not contain the provided value as a member."
  excludes: Int
  "Match if list field contains all of the provided values as members."
  includesAll: [Int!]
  "Match if list field does not contain any of the provided values as members."
  excludesAll: [Int!]
}

"Query filter criteria for `Int64` scalar fields."
input Int64_Filter {
  "When true, match if field `IS NULL`. When false, match if field is `NOT NULL`."
  isNull: Boolean
  "Match if field is exactly equal to provided value."
  eq: Int64
  "Match if field is not equal to provided value."
  ne: Int64
  "Match if field value is among the provided list of values."
  in: [Int64!]
  "Match if field value is not among the provided list of values."
  nin: [Int64!]
  "Match if field value is greater than the provided value."
  gt: Int64
  "Match if field value is greater than or equal to the provided value."
  ge: Int64
  "Match if field value is less than the provided value."
  lt: Int64
  "Match if field value is less than or equal to the provided value."
  le: Int64
}

"Query filter criteria for `[Int64!]` scalar fields."
input Int64_ListFilter {
  "Match if list field contains the provided value as a member."
  includes: Int64
  "Match if list field does not contain the provided value as a member."
  excludes: Int64
  "Match if list field contains all of the provided values as members."
  includesAll: [Int64!]
  "Match if list field does not contain any of the provided values as members."
  excludesAll: [Int64!]
}

"Query filter criteria for `Float` scalar fields."
input Float_Filter {
  "When true, match if field `IS NULL`. When false, match if field is `NOT NULL`."
  isNull: Boolean
  "Match if field is exactly equal to provided value."
  eq: Float
  "Match if field is not equal to provided value."
  ne: Float
  "Match if field value is among the provided list of values."
  in: [Float!]
  "Match if field value is not among the provided list of values."
  nin: [Float!]
  "Match if field value is greater than the provided value."
  gt: Float
  "Match if field value is greater than or equal to the provided value."
  ge: Float
  "Match if field value is less than the provided value."
  lt: Float
  "Match if field value is less than or equal to the provided value."
  le: Float
}

"Query filter criteria for `[Float!]` scalar fields."
input Float_ListFilter {
  "Match if list field contains the provided value as a member."
  includes: Float
  "Match if list field does not contain the provided value as a member."
  excludes: Float
  "Match if list field contains all of the provided values as members."
  includesAll: [Float!]
  "Match if list field does not contain any of the provided values as members."
  excludesAll: [Float!]
}

"Query filter criteria for `Boolean` scalar fields."
input Boolean_Filter {
  "When true, match if field `IS NULL`. When false, match if field is `NOT NULL`."
  isNull: Boolean
  "Match if field is exactly equal to provided value."
  eq: Boolean
  "Match if field is not equal to provided value."
  ne: Boolean
  "Match if field value is among the provided list of values."
  in: [Boolean!]
  "Match if field value is not among the provided list of values."
  nin: [Boolean!]
}

"Query filter criteria for `[Boolean!]` scalar fields."
input Boolean_ListFilter {
  "Match if list field contains the provided value as a member."
  includes: Boolean
  "Match if list field does not contain the provided value as a member."
  excludes: Boolean
  "Match if list field contains all of the provided values as members."
  includesAll: [Boolean!]
  "Match if list field does not contain any of the provided values as members."
  excludesAll: [Boolean!]
}

"Query filter criteria for `Any` scalar fields."
input Any_Filter {
  "When true, match if field `IS NULL`. When false, match if field is `NOT NULL`."
  isNull: Boolean
  "Match if field is exactly equal to provided value."
  eq: Any
  "Match if field is not equal to provided value."
  ne: Any
  "Match if field value is among the provided list of values."
  in: [Any!]
  "Match if field value is not among the provided list of values."
  nin: [Any!]
}

"Query filter criteria for `[Any!]` scalar fields."
input Any_ListFilter {
  "Match if list field contains the provided value as a member."
  includes: Any
  "Match if list field does not contain the provided value as a member."
  excludes: Any
  "Match if list field contains all of the provided values as members."
  includesAll: [Any!]
  "Match if list field does not contain any of the provided values as members."
  excludesAll: [Any!]
}
"""
(Internal) A string that uniquely identifies a type, field, and so on.

The most common usage in FDC is `SomeType` or `SomeType.someField`. See the
linked page in the @specifiedBy directive for the GraphQL RFC with more details.
"""
scalar SchemaCoordinate
  @specifiedBy(url: "https://github.com/graphql/graphql-wg/blob/6d02705dea034fb65ebc6799632adb7bd550d0aa/rfcs/SchemaCoordinates.md")
  @fdc_forbiddenAsFieldType
  @fdc_forbiddenAsVariableType

"(Internal) The purpose of a generated type or field."
enum GeneratedPurpose {
  # Implicit fields added to the table types as columns.
  IMPLICIT_KEY_FIELD
  IMPLICIT_REF_FIELD

  # Relational non-column fields extended to table types.
  QUERY_MULTIPLE_ONE_TO_MANY
  QUERY_MULTIPLE_MANY_TO_MANY

  # Top-level Query fields.
  QUERY_SINGLE
  QUERY_MULTIPLE
  QUERY_MULTIPLE_BY_SIMILARITY

  # Top-level Mutation fields.
  INSERT_SINGLE
  INSERT_MULTIPLE
  UPSERT_SINGLE
  UPSERT_MULTIPLE
  UPDATE_SINGLE
  UPDATE_MULTIPLE
  DELETE_SINGLE
  DELETE_MULTIPLE
}

"(Internal) Added to definitions generated by FDC."
directive @fdc_generated(
  "The source type or field that causes this definition to be generated."
  from: SchemaCoordinate!
  "The reason why this definition is generated, such as the intended use case."
  purpose: GeneratedPurpose!
) on
  | SCALAR
  | OBJECT
  | FIELD_DEFINITION
  | ARGUMENT_DEFINITION
  | INTERFACE
  | UNION
  | ENUM
  | ENUM_VALUE
  | INPUT_OBJECT
  | INPUT_FIELD_DEFINITION
"""
Defines a database index to optimize query performance.

Given `type TableName @table @index(fields: [“fieldName”, “secondFieldName”])`,
`table_name_field_name_second_field_name_aa_idx` is the SQL index id.
`table_name_field_name_second_field_name_ad_idx` if `order: [ASC DESC]`.
`table_name_field_name_second_field_name_dd_idx` if `order: [DESC DESC]`.

Given `type TableName @table { fieldName: Int @index } `
`table_name_field_name_idx` is the SQL index id.
`order` matters less for single field indexes because they can be scanned in both ways.

Override with `@index(name)` in case of index name conflicts.
"""
directive @index(
  "The SQL database index id. Defaults to <table_name>_<field_name>_idx."
  name: String
  """
  Only allowed and required when used on OBJECT.
  The fields to create an index on.
  """
  fields: [String!]
  """
  Only allowed when used on OBJECT and BTREE index.
  Index order of each column. Default to all ASC.
  """
  order: [IndexFieldOrder!]
  """
  For array field, default to `GIN`.
  For Vector field, default to `HNSW`.
  """
  type: IndexType
  """
  Only allowed when used on vector field.
  The vector similarity method. Default to `INNER_PRODUCT`.
  """
  vector_method: VectorSimilarityMethod
) repeatable on FIELD_DEFINITION | OBJECT

enum IndexFieldOrder { ASC DESC }

enum IndexType {
  BTREE
  GIN
  HNSW
  IVFFLAT
}
type Query {
  _service: _Service!
}

type Mutation {
  # This is just a dummy field so that Mutation is always non-empty.
  _firebase: Void @fdc_deprecated(reason: "dummy field -- does nothing useful")
}

type _Service {
  sdl: String!
}

"(Internal) Added to things that may be removed from FDC and will soon be no longer usable in schema or operations."
directive @fdc_deprecated(reason: String = "No longer supported") on
  | SCHEMA
  | SCALAR
  | OBJECT
  | FIELD_DEFINITION
  | ARGUMENT_DEFINITION
  | INTERFACE
  | UNION
  | ENUM
  | ENUM_VALUE
  | INPUT_OBJECT
  | INPUT_FIELD_DEFINITION

"(Internal) Added to scalars representing quoted CEL expressions."
directive @fdc_celExpression(
  "The expected CEL type that the expression should evaluate to."
  returnType: String
) on SCALAR

"(Internal) Added to scalars representing quoted SQL expressions."
directive @fdc_sqlExpression(
  "The expected SQL type that the expression should evaluate to."
  dataType: String
) on SCALAR

"(Internal) Added to types that may not be used as variables."
directive @fdc_forbiddenAsVariableType on SCALAR | OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT

"(Internal) Added to types that may not be used as fields in schema."
directive @fdc_forbiddenAsFieldType on SCALAR | OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT

"Provides a frequently used example for this type / field / argument."
directive @fdc_example(
  "A GraphQL literal value (verbatim) whose type matches the target."
  value: Any
  "A human-readable text description of what `value` means in this context."
  description: String
) repeatable on SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | INTERFACE | UNION | ENUM | INPUT_OBJECT | INPUT_FIELD_DEFINITION

"(Internal) Marks this field / argument as conflicting with others in the same group."
directive @fdc_oneOf(
  "The group name where fields / arguments conflict with each other."
  group: String! = ""
  "If true, exactly one field / argument in the group must be specified."
  required: Boolean! = false
) repeatable on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION
"""
UUID is a string with hex digits representing an RFC4122 value.

Outputs will always be 32 lower-case hex digits with no delimiters or curly
braces. Inputs in the following formats are also accepted (case insensitive):

    xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
    urn:uuid:xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
    {xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}
"""
scalar UUID @specifiedBy(url: "https://tools.ietf.org/html/rfc4122")
scalar Int64

scalar Any
scalar Void
"""
The `True` scalar type only accepts the boolean `true`.

An optional field / argument typed `True` may either be set to `true` or omitted
(not provided at all). `false` or `null` is not accepted.
"""
scalar True
  @fdc_forbiddenAsFieldType
  @fdc_forbiddenAsVariableType
  @fdc_example(value: true, description: "The only allowed value.")
"Define the intervals used in timestamps and dates (subset)"
enum TimestampInterval @fdc_deprecated {
  second
  minute
  hour
  day
  week
  month
  year
}
"""
A Common Expression Language (CEL) expression that returns a boolean at runtime.

The expression can reference the `auth` variable, which is null if Firebase Auth
is not used. Otherwise, it contains the following fields:

    - `auth.uid`: The current user ID.
    - `auth.token`: A map of all token fields (i.e. "claims").
"""
scalar Boolean_Expr
  @specifiedBy(url: "https://github.com/google/cel-spec")
  @fdc_celExpression(returnType: "bool")
  @fdc_forbiddenAsVariableType
  @fdc_forbiddenAsFieldType
  @fdc_example(value: "auth != null", description: "Allow only if a Firebase Auth user is present.")

"""
A Common Expression Language (CEL) expression that returns a string at runtime.

Limitation: Right now, only a few expressions are supported. Those are listed
using the @fdc_example directive on this scalar.
"""
scalar String_Expr
  @specifiedBy(url: "https://github.com/google/cel-spec")
  @fdc_celExpression(returnType: "string")
  @fdc_forbiddenAsVariableType
  @fdc_forbiddenAsFieldType
  @fdc_example(value: "auth.uid", description: "The ID of the currently logged in user in Firebase Auth. (Errors if not logged in.)")
  @fdc_example(value: "uuidV4()", description: "Generates a new random UUID (version 4) string, formatted as 32 lower-case hex digits without delimiters.")

"""
A Common Expression Language (CEL) expression that returns a UUID string at runtime.

Limitation: Right now, only a few expressions are supported. Those are listed
using the @fdc_example directive on this scalar.
"""
scalar UUID_Expr
  @specifiedBy(url: "https://github.com/google/cel-spec")
  @fdc_celExpression(returnType: "string")
  @fdc_forbiddenAsVariableType
  @fdc_forbiddenAsFieldType
  @fdc_example(value: "uuidV4()", description: "Generates a new random UUID (version 4) every time.")

"""
A Common Expression Language (CEL) expression whose return type is unspecified.

Limitation: Only a limited set of expressions are supported for now for each
type. For type XXX, see the @fdc_example directives on XXX_Expr for a full list.
"""
scalar Any_Expr
  @specifiedBy(url: "https://github.com/google/cel-spec")
  @fdc_celExpression
  @fdc_forbiddenAsVariableType
  @fdc_forbiddenAsFieldType
  @fdc_example(value: "auth.uid", description: "The ID of the currently logged in user in Firebase Auth. (Errors if not logged in.)")
  @fdc_example(value: "uuidV4()", description: "Generates a new random UUID version 4 (formatted as 32 lower-case hex digits without delimiters if result type is String).")
  @fdc_example(value: "request.time", description: "The timestamp when the request is received (with microseconds precision).")

"""
A PostgreSQL value expression whose return type is unspecified.
"""
scalar Any_SQL
  @specifiedBy(url: "https://www.postgresql.org/docs/current/sql-expressions.html")
  @fdc_sqlExpression
  @fdc_forbiddenAsVariableType
  @fdc_forbiddenAsFieldType
"""
Defines a relational database table.

Given `type TableName @table`,

 - `TableName` is the GQL type name.
 - `tableName` is the singular name. Override with `@table(singular)`.
 - `tableNames` is the plural name. Override with `@table(plural)`.
 - `table_name` is the SQL table id. Override with `@table(name)`.

Only a table type can be configured further with:

 - Customized data types. See `@col`.
 - Index. See `@index`
 - Unique constraint. See `@unqiue`
 - Relation. See `@ref`
 - Embedded Json. See `@embed`

A scalar field map to a SQL database column.
An object field (like `type TableName @table { field: AnotherType }`) are either

 - a relation reference field if `AnotherType` is annotated with `@table`.
 - an embedded json field if `field` is annotated with `@embed`.

"""
directive @table(
  "Override the SQL database table name. Defaults to <table_name>."
  name: String
  "Override the singular name. Default is the camel case of the type name."
  singular: String
  "Override the plural name. Default is generated based on English patterns."
  plural: String
  "The primary key of the table. Defaults to a single field `id: UUID!`. Generate if missing."
  key: [String!]
) on OBJECT

"""
Defines a relational database view.

Given `type ViewName @view`,
 - `ViewName` is the GQL type name.
 - `viewName` is the singular name. Override with `@view(singular)`.
 - `viewNames` is the plural name. Override with `@view(plural)`.
 - `view_name` is the SQL view id. Override with `@view(name)`.
    When `@view(sql)` is defined, it uses the given raw SQL as the view instead.

A view type can be used just as a table type with queries.
A view type may have a nullable `@ref` field to another table, but cannot be
referenced in a `@ref`.

WARNING: Firebase Data Connect does not validate the SQL of the view or
evaluate whether it matches the defined fields.

If the SQL view is invalid or undefined, related requests may fail.
If the SQL view return incompatible types. Firebase Data Connect will surface
an error in the response.
"""
directive @view(
  """
  The SQL view name. If no `name` or `sql` are provided, defaults to
  snake_case of the singular type name.
  """
  name: String @fdc_oneOf
  """
  SQL SELECT statement to use as the basis for this type. Note that all SQL
  identifiers should be snake_case and all GraphQL identifiers should be
  camelCase.
  """
  sql: String @fdc_oneOf
  "Override the singular name. Default is the camel case of the type name."
  singular: String
  "Override the plural name. Default is generated based on English patterns."
  plural: String
) on OBJECT

"""
Specify additional column options.

Given `type TableName @table { fieldName: Int } `

 - `field_name` is the SQL column name. Override with `@col(name)`.

"""
directive @col(
  "The SQL database column name. Defaults to <field_name>."
  name: String
  """
  Override SQL columns data type.
  Each GraphQL type could map to many SQL data types.
  Refer to Postgres supported data types and mappings to GQL.
  """
  dataType: String
  """
  Defines a fixed column size for certain scalar types.

  - For Vector, size is required. It establishes the length of the vector.
  - For String, size converts `text` type to `varchar(size)`.
  """
  size: Int
) on FIELD_DEFINITION


"""
Define a reference field to another table.

Given `type TableName @table { refField: AnotherTableName }`, it defines a foreign-key constraint

 - with id `table_name_ref_field_fkey` (override with `@ref(constraintName)`)
 - from `table_name.ref_field` (override with `@ref(fields)`)
 - to `another_table_name.id` (override with `@ref(references)`)

Does not support `[AnotherTableName]` because array fields cannot have foreign-key constraints.
Nullability determines whether the reference is required.

 - `refField: AnotherTableName`: optional reference, SET_NULL on delete.
 - `refField: AnotherTableName!`: required reference, CASCADE on delete.

Consider all types of SQL relations:

 - many-to-one relations involve a reference field on the many-side.
    - many-to-maybe-one if `refField: AnotherTableName`.
    - many-to-exactly-one if `refField: AnotherTableName!`.
 - one-to-one relations involve a unique reference field on one side.
    - maybe-one-to-maybe-one if `refField: AnotherTableName @unique`.
    - maybe-one-to-exact-one if `refField: AnotherTableName! @unique`.
    - exact-one-to-exact-one shall be represented as a single table instead.
 - many-to-many relations involve a join table.
    - Its primary keys must be two non-null reference fields to tables bridged together to guarantee at most one relation per pair.

type TableNameToAnotherTableName @table(key: ["refField", "anotherRefField"]) {
  refField: TableName!
  anotherRefField: AnotherTableName!
}

"""
directive @ref(
  "The SQL database foreign key constraint name. Default to <table_name>_<field_name>_fkey."
  constraintName: String
  """
  Foreign key fields. Default to <tableName><PrimaryIdName>.
  """
  fields: [String!]
  "The fields that the foreign key references in the other table. Default to the primary key."
  references: [String!]
) on FIELD_DEFINITION

"Define the direction of an orderby query"
enum OrderDirection {
  ASC
  DESC
}

enum ColDefault @fdc_deprecated {
  """
  Generates a random UUID (v4) as the default column value.
  Compatible with String or UUID typed fields.
  """
  UUID
  """
  Generates an auto-incrementing sequence as the default column value.
  Compatible with Int and Int64 typed fields.
  """
  SEQUENCE
  """
  Populates the default column value with the current date or timestamp.
  Compatible with Date and Timestamp typed fields.
  """
  NOW
}

"""
Specify the default column value.

The supported arguments vary based on the field type.
"""
directive @default(
  "A constant value. Validated against the field GraphQL type at compile-time."
  value: Any @fdc_oneOf(required: true)
  "(Deprecated) Built-in common ways to generate initial value."
  generate: ColDefault @fdc_oneOf(required: true) @deprecated
  "A CEL expression, whose return value must match the field data type."
  expr: Any_Expr @fdc_oneOf(required: true)
  """
  A raw SQL expression, whose SQL data type must match the underlying column.

  The value is any variable-free expression (in particular, cross-references to
  other columns in the current table are not allowed). Subqueries are not allowed either.
  https://www.postgresql.org/docs/current/sql-createtable.html#SQL-CREATETABLE-PARMS-DEFAULT
  """
  sql: Any_SQL @fdc_oneOf(required: true)
) on FIELD_DEFINITION
"""
Date is a string in the YYYY-MM-DD format representing a local-only date.

See the description for Timestamp for range and limitations.

As a FDC-specific extension, inputs that includes time portions (as specified by
the Timestamp scalar) are accepted but only the date portion is used. In other
words, only the part before "T" is used and the rest discarded. This effectively
truncates it to the local date in the specified time-zone.

Outputs will always be in the canonical YYYY-MM-DD format.
"""
scalar Date @specifiedBy(url: "https://scalars.graphql.org/andimarek/local-date.html")

"""
Timestamp is a RFC 3339 string that represents an exact point in time.

The serialization format follows https://scalars.graphql.org/andimarek/date-time
except the "Non-optional exact milliseconds" Section. As a FDC-specific
extension, inputs and outputs may contain 0, 3, 6, or 9 fractional digits.

Specifically, output precision varies by server-side factors such as data source
support and clients must not rely on an exact number of digits. Clients may
truncate extra digits as fit, with the caveat that there may be information loss
if the truncated value is subsequently sent back to the server.

FDC only supports year 1583 to 9999 (inclusive) and uses the ISO-8601 calendar
system for all date-time calculations. Notably, the expanded year representation
(+/-YYYYY) is rejected and Year 1582 and before may either be rejected or cause
undefined behavior.
"""
scalar Timestamp @specifiedBy(url: "https://scalars.graphql.org/andimarek/date-time")

"""
A Common Expression Language (CEL) expression that returns a Timestamp at runtime.

Limitation: Right now, only a few expressions are supported. Those are listed
using the @fdc_example directive on this scalar.
"""
scalar Timestamp_Expr
  @specifiedBy(url: "https://github.com/google/cel-spec")
  @fdc_celExpression(returnType: "google.protobuf.Timestamp")
  @fdc_forbiddenAsVariableType
  @fdc_forbiddenAsFieldType
  @fdc_example(value: "request.time", description: "The timestamp when the request is received (with microseconds precision).")

"""
A Common Expression Language (CEL) expression that returns a Timestamp at runtime,
which is then truncated to UTC date only. The time-of-day parts are discarded.

Limitation: Right now, only a few expressions are supported. Those are listed
using the @fdc_example directive on this scalar.
"""
scalar Date_Expr
  @specifiedBy(url: "https://github.com/google/cel-spec")
  @fdc_celExpression(returnType: "google.protobuf.Timestamp")
  @fdc_forbiddenAsVariableType
  @fdc_forbiddenAsFieldType
  @fdc_example(value: "request.time", description: "The UTC date on which the request is received.")

"Conditions on a Date value"
input Date_Filter {
  isNull: Boolean
  eq: Date @fdc_oneOf(group: "eq")
  eq_expr: Date_Expr @fdc_oneOf(group: "eq")
  eq_date: Date_Relative @fdc_oneOf(group: "eq")
  ne: Date @fdc_oneOf(group: "ne")
  ne_expr: Date_Expr @fdc_oneOf(group: "ne")
  ne_date: Date_Relative @fdc_oneOf(group: "ne")
  in: [Date!]
  nin: [Date!]
  gt: Date @fdc_oneOf(group: "gt")
  gt_expr: Date_Expr @fdc_oneOf(group: "gt")
  gt_date: Date_Relative @fdc_oneOf(group: "gt")
  ge: Date @fdc_oneOf(group: "ge")
  ge_expr: Date_Expr @fdc_oneOf(group: "ge")
  ge_date: Date_Relative @fdc_oneOf(group: "ge")
  lt: Date @fdc_oneOf(group: "lt")
  lt_expr: Date_Expr @fdc_oneOf(group: "lt")
  lt_date: Date_Relative @fdc_oneOf(group: "lt")
  le: Date @fdc_oneOf(group: "le")
  le_expr: Date_Expr @fdc_oneOf(group: "le")
  le_date: Date_Relative @fdc_oneOf(group: "le")
}

"Conditions on a Date list"
input Date_ListFilter {
  includes: Date @fdc_oneOf(group: "includes")
  includes_expr: Date_Expr @fdc_oneOf(group: "includes")
  includes_date: Date_Relative @fdc_oneOf(group: "includes")
  excludes: Date @fdc_oneOf(group: "excludes")
  excludes_expr: Date_Expr @fdc_oneOf(group: "excludes")
  excludes_date: Date_Relative @fdc_oneOf(group: "excludes")
  includesAll: [Date!]
  excludesAll: [Date!]
}

"Conditions on an Timestamp value"
input Timestamp_Filter {
  isNull: Boolean
  eq: Timestamp @fdc_oneOf(group: "eq")
  eq_expr: Timestamp_Expr @fdc_oneOf(group: "eq")
  eq_time: Timestamp_Relative @fdc_oneOf(group: "eq")
  ne: Timestamp @fdc_oneOf(group: "ne")
  ne_expr: Timestamp_Expr @fdc_oneOf(group: "ne")
  ne_time: Timestamp_Relative @fdc_oneOf(group: "ne")
  in: [Timestamp!]
  nin: [Timestamp!]
  gt: Timestamp @fdc_oneOf(group: "gt")
  gt_expr: Timestamp_Expr @fdc_oneOf(group: "gt")
  gt_time: Timestamp_Relative @fdc_oneOf(group: "gt")
  ge: Timestamp @fdc_oneOf(group: "ge")
  ge_expr: Timestamp_Expr @fdc_oneOf(group: "ge")
  ge_time: Timestamp_Relative @fdc_oneOf(group: "ge")
  lt: Timestamp @fdc_oneOf(group: "lt")
  lt_expr: Timestamp_Expr @fdc_oneOf(group: "lt")
  lt_time: Timestamp_Relative @fdc_oneOf(group: "lt")
  le: Timestamp @fdc_oneOf(group: "le")
  le_expr: Timestamp_Expr @fdc_oneOf(group: "le")
  le_time: Timestamp_Relative @fdc_oneOf(group: "le")
}

"Conditions on a Timestamp list"
input Timestamp_ListFilter {
  includes: Timestamp @fdc_oneOf(group: "includes")
  includes_expr: Timestamp_Expr @fdc_oneOf(group: "includes")
  includes_time: Timestamp_Relative @fdc_oneOf(group: "includes")
  excludes: Timestamp @fdc_oneOf(group: "excludes")
  excludes_expr: Timestamp_Expr @fdc_oneOf(group: "excludes")
  excludes_time: Timestamp_Relative @fdc_oneOf(group: "excludes")
  includesAll: [Timestamp!]
  excludesAll: [Timestamp!]
}

"Update input of a Date value"
input Date_Update {
  set: Date @fdc_oneOf(group: "set")
  set_expr: Date_Expr @fdc_oneOf(group: "set")
  set_date: Date_Relative @fdc_oneOf(group: "set")
}

"Update input of a Date list value"
input Date_ListUpdate {
  set: [Date!]
  append: [Date!]
  prepend: [Date!]
  delete: Int
  i: Int
  update: Date
}

"Update input of a Timestamp value"
input Timestamp_Update {
  set: Timestamp @fdc_oneOf(group: "set")
  set_expr: Timestamp_Expr @fdc_oneOf(group: "set")
  set_time: Timestamp_Relative @fdc_oneOf(group: "set")
}

"Update input of a Timestamp list value"
input Timestamp_ListUpdate {
  set: [Timestamp!]
  append: [Timestamp!]
  prepend: [Timestamp!]
  delete: Int
  i: Int
  update: Timestamp
}

"A runtime-calculated Timestamp value relative to `now` or `at`."
input Timestamp_Relative @fdc_forbiddenAsVariableType @fdc_forbiddenAsFieldType {
  now: True @fdc_oneOf(group: "from", required: true)
  at: Timestamp @fdc_oneOf(group: "from", required: true)

  add: Timestamp_Duration
  sub: Timestamp_Duration

  truncateTo: Timestamp_Interval
}

input Timestamp_Duration @fdc_forbiddenAsVariableType @fdc_forbiddenAsFieldType {
  milliseconds: Int! = 0
  seconds: Int! = 0
  minutes: Int! = 0
  hours: Int! = 0
  days: Int! = 0
  weeks: Int! = 0
  months: Int! = 0
  years: Int! = 0
}

enum Timestamp_Interval @fdc_forbiddenAsFieldType {
  SECOND
  MINUTE
  HOUR
  DAY
  WEEK
  MONTH
  YEAR
}

"A runtime-calculated Date value relative to `today` or `on`."
input Date_Relative @fdc_forbiddenAsVariableType @fdc_forbiddenAsFieldType {
  today: True @fdc_oneOf(group: "from", required: true)
  on: Date @fdc_oneOf(group: "from", required: true)

  add: Date_Duration
  sub: Date_Duration

  truncateTo: Date_Interval
}

input Date_Duration @fdc_forbiddenAsVariableType @fdc_forbiddenAsFieldType {
  days: Int! = 0
  weeks: Int! = 0
  months: Int! = 0
  years: Int! = 0
}

enum Date_Interval @fdc_forbiddenAsFieldType {
  WEEK
  MONTH
  YEAR
}
"""
Defines a unique constraint.

Given `type TableName @table @unique(fields: [“fieldName”, “secondFieldName”])`,
`table_name_field_name_second_field_name_uidx` is the SQL unique index id.
Given `type TableName @table { fieldName: Int @unique } `
`table_name_field_name_uidx` is the SQL unique index id.

Override with `@unique(indexName)` in case of index name conflicts.
"""
directive @unique(
  "The SQL database unique index name. Defaults to <table_name>_<field_name>_uidx."
  indexName: String
  """
  Only allowed and required when used on OBJECT.
  The fields to create a unique constraint on.
  """
  fields: [String!]
) repeatable on FIELD_DEFINITION | OBJECT
"Update input of a String value"
input String_Update {
  set: String @fdc_oneOf(group: "set")
  set_expr: String_Expr @fdc_oneOf(group: "set")
}

"Update input of a String list value"
input String_ListUpdate {
  set: [String!]
  append: [String!]
  prepend: [String!]
}

"Update input of a UUID value"
input UUID_Update {
  set: UUID @fdc_oneOf(group: "set")
  set_expr: UUID_Expr @fdc_oneOf(group: "set")
}

"Update input of an ID list value"
input UUID_ListUpdate {
  set: [UUID!]
  append: [UUID!]
  prepend: [UUID!]
}

"Update input of an Int value"
input Int_Update {
  set: Int
  inc: Int
  dec: Int
}

"Update input of an Int list value"
input Int_ListUpdate {
  set: [Int!]
  append: [Int!]
  prepend: [Int!]
}

"Update input of an Int64 value"
input Int64_Update {
  set: Int64
  inc: Int64
  dec: Int64
}

"Update input of an Int64 list value"
input Int64_ListUpdate {
  set: [Int64!]
  append: [Int64!]
  prepend: [Int64!]
}

"Update input of a Float value"
input Float_Update {
  set: Float
  inc: Float
  dec: Float
}

"Update input of a Float list value"
input Float_ListUpdate {
  set: [Float!]
  append: [Float!]
  prepend: [Float!]
}

"Update input of a Boolean value"
input Boolean_Update {
  set: Boolean
}

"Update input of a Boolean list value"
input Boolean_ListUpdate {
  set: [Boolean!]
  append: [Boolean!]
  prepend: [Boolean!]
}

"Update input of an Any value"
input Any_Update {
  set: Any
}

"Update input of an Any list value"
input Any_ListUpdate {
  set: [Any!]
  append: [Any!]
  prepend: [Any!]
}
"""
Vector is an array of single-precision floating-point numbers, serialized
as a JSON array. All elements must be finite (no NaN, Infinity or -Infinity).

Example: [1.1, 2, 3.3]
"""
scalar Vector

"""
Defines what siliarlity function to use for fetching vectors.
Details here: https://github.com/pgvector/pgvector?tab=readme-ov-file#vector-functions
"""
enum VectorSimilarityMethod {
  L2
  COSINE
  INNER_PRODUCT
}

"Conditions on an Vector value"
input Vector_Filter {
  eq: Vector
  ne: Vector
  in: [Vector!]
  nin: [Vector!]
  isNull: Boolean
}

input Vector_ListFilter {
  "When true, will match if the list includes the supplied vector."
  includes: Vector
  excludes: Vector
  includesAll: [Vector!]
  excludesAll: [Vector!]
}

"Update input of an Vector value"
input Vector_Update {
  set: Vector @fdc_oneOf(group: "set")
  set_embed: Vector_Embed @fdc_oneOf(group: "set")
}

"Update input of a Vector list value"
input Vector_ListUpdate {
  set: [Vector]
  append: [Vector]
  prepend: [Vector]
  delete: Int
  i: Int
  update: Vector
}

"""
Create a vector embedding of text using the given model on Vertex AI.

Example: {text: "Hi there", model: "textembedding-gecko@003"}
See: https://cloud.google.com/vertex-ai/generative-ai/docs/embeddings/get-text-embeddings

Limitation: In the emulator, if Vertex AI is not configured, a pseudorandom
vector is generated from text as a fake implementation for testing only.
"""
input Vector_Embed @fdc_forbiddenAsVariableType {
  model: Vector_Embed_Model!
  text: String!
}

"""
A string that specifies a Vertex AI model and version.

It is strongly recommended to specify a stable model version (for example,
textembedding-gecko@003). The latest version of a model is in Preview and is not
General Availability (GA). Because the latest version is in Preview, it isn't
guaranteed to be production ready.
"""
scalar Vector_Embed_Model
  @specifiedBy(url: "https://cloud.google.com/vertex-ai/generative-ai/docs/learn/model-versioning")
  @fdc_forbiddenAsVariableType
  @fdc_forbiddenAsFieldType
  @fdc_example(value: "textembedding-gecko@003", description: "A stable version of the textembedding-gecko model")
